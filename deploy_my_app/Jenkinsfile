pipeline {
    agent any
    parameters {
        choice(name: 'SERVER', choices: ['server1'])
    }

    stages {
        stage('Clone repo') {
            steps {
                dir('/tmp/myapp') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[url: 'git@github.com:VorobyevAM/learn_python.git', credentialsId: 'github_cred']]
                    ])
                }
            }
        }

        stage('Copy app files') {
            steps {
             withCredentials([sshUserPrivateKey(credentialsId: 'SSH_CRED', keyFileVariable: 'PRIVATE')]){
                 sh 'ansible-playbook deploy_my_app/copy_files.yml -i deploy_my_app/hosts.yml -e "host=${SERVER}"'
                 }
            }
        }

        stage('Edit virtual env') {
            steps {
             withCredentials([sshUserPrivateKey(credentialsId: 'SSH_CRED', keyFileVariable: 'PRIVATE')]){
                 sh 'source /opt/myapp/my_env/bin/activate'
                 sh 'pip install -r /opt/myapp/requirements.txt'
                 sh 'deactivate'
                 }
            }
        }

        stage('Stop app') {
            steps {
             withCredentials([sshUserPrivateKey(credentialsId: 'SSH_CRED', keyFileVariable: 'PRIVATE')]){
                 sh 'ansible-playbook deploy_my_app/stop.yml -i deploy_my_app/hosts.yml -e "host=${SERVER}"'
                 }
            }
        }

        stage('Start app') {
            steps {
             withCredentials([sshUserPrivateKey(credentialsId: 'SSH_CRED', keyFileVariable: 'PRIVATE')]){
                 sh 'ansible-playbook deploy_my_app/start.yml -i deploy_my_app/hosts.yml -e "host=${SERVER}"'
                 }
            }
        }

        stage('Clear tmp files') {
            steps {
             withCredentials([sshUserPrivateKey(credentialsId: 'SSH_CRED', keyFileVariable: 'PRIVATE')]){
                 sh 'rm -rf /tmp/myapp'
                 }
            }
        }
    }

    post {
          cleanup {
              cleanWs()
          }
    }
}
